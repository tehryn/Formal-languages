FOPEN(3)                                                 Linux Programmer's Manual                                                 FOPEN(3)

NNAAMMEE
       fopen, fdopen, freopen - stream open functions

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssttddiioo..hh>>

       FFIILLEE **ffooppeenn((ccoonnsstt cchhaarr **_p_a_t_h,, ccoonnsstt cchhaarr **_m_o_d_e));;

       FFIILLEE **ffddooppeenn((iinntt _f_d,, ccoonnsstt cchhaarr **_m_o_d_e));;

       FFIILLEE **ffrreeooppeenn((ccoonnsstt cchhaarr **_p_a_t_h,, ccoonnsstt cchhaarr **_m_o_d_e,, FFIILLEE **_s_t_r_e_a_m));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ffddooppeenn(): _POSIX_C_SOURCE >= 1 || _XOPEN_SOURCE || _POSIX_SOURCE

DDEESSCCRRIIPPTTIIOONN
       The ffooppeenn() function opens the file whose name is the string pointed to by _p_a_t_h and associates a stream with it.

       The  argument  _m_o_d_e points to a string beginning with one of the following sequences (possibly followed by additional characters, as
       described below):

       rr      Open text file for reading.  The stream is positioned at the beginning of the file.

       rr++     Open for reading and writing.  The stream is positioned at the beginning of the file.

       ww      Truncate file to zero length or create text file for writing.  The stream is positioned at the beginning of the file.

       ww++     Open for reading and writing.  The file is created if it does not exist, otherwise it is truncated.  The stream is positioned
              at the beginning of the file.

       aa      Open  for appending (writing at end of file).  The file is created if it does not exist.  The stream is positioned at the end
              of the file.

       aa++     Open for reading and appending (writing at end of file).  The file is created if it does not exist.  The initial  file  posi‐
              tion for reading is at the beginning of the file, but output is always appended to the end of the file.

       The  _m_o_d_e  string  can also include the letter 'b' either as a last character or as a character between the characters in any of the
       two-character strings described above.  This is strictly for compatibility with C89 and has no effect; the 'b'  is  ignored  on  all
       POSIX conforming systems, including Linux.  (Other systems may treat text files and binary files differently, and adding the 'b' may
       be a good idea if you do I/O to a binary file and expect that your program may be ported to non-UNIX environments.)

       See NOTES below for details of glibc extensions for _m_o_d_e.

       Any created files will have mode SS__IIRRUUSSRR | SS__IIWWUUSSRR | SS__IIRRGGRRPP | SS__IIWWGGRRPP | SS__IIRROOTTHH | SS__IIWWOOTTHH (0666),  as  modified  by  the  process's
       umask value (see uummaasskk(2)).

       Reads  and  writes may be intermixed on read/write streams in any order.  Note that ANSI C requires that a file positioning function
       intervene between output and input, unless an input operation encounters end-of-file.  (If this condition is not met, then a read is
       allowed  to  return the result of writes other than the most recent.)  Therefore it is good practice (and indeed sometimes necessary
       under Linux) to put an ffsseeeekk(3) or ffggeettppooss(3) operation between write and read operations on such a stream.  This operation  may  be
       an apparent no-op (as in _f_s_e_e_k_(_._._._, _0_L_, _S_E_E_K___C_U_R_) called for its synchronizing side effect).

       Opening  a  file in append mode (aa as the first character of _m_o_d_e) causes all subsequent write operations to this stream to occur at
       end-of-file, as if preceded the call:

           fseek(stream, 0, SEEK_END);

       The ffddooppeenn() function associates a stream with the existing file descriptor, _f_d.  The _m_o_d_e of the stream (one  of  the  values  "r",
       "r+",  "w", "w+", "a", "a+") must be compatible with the mode of the file descriptor.  The file position indicator of the new stream
       is set to that belonging to _f_d, and the error and end-of-file indicators are cleared.  Modes "w" or "w+" do not cause truncation  of
       the  file.   The  file  descriptor  is  not dup'ed, and will be closed when the stream created by ffddooppeenn() is closed.  The result of
       applying ffddooppeenn() to a shared memory object is undefined.

       The ffrreeooppeenn() function opens the file whose name is the string pointed to by _p_a_t_h and associates the stream  pointed  to  by  _s_t_r_e_a_m
       with it.  The original stream (if it exists) is closed.  The _m_o_d_e argument is used just as in the ffooppeenn() function.  The primary use
       of the ffrreeooppeenn() function is to change the file associated with a standard text stream (_s_t_d_e_r_r, _s_t_d_i_n, or _s_t_d_o_u_t).

RREETTUURRNN VVAALLUUEE
       Upon successful completion ffooppeenn(), ffddooppeenn() and ffrreeooppeenn() return a _F_I_L_E pointer.  Otherwise, NULL is returned and _e_r_r_n_o is  set  to
       indicate the error.

EERRRROORRSS
       EEIINNVVAALL The _m_o_d_e provided to ffooppeenn(), ffddooppeenn(), or ffrreeooppeenn() was invalid.

       The ffooppeenn(), ffddooppeenn() and ffrreeooppeenn() functions may also fail and set _e_r_r_n_o for any of the errors specified for the routine mmaalllloocc(3).

       The ffooppeenn() function may also fail and set _e_r_r_n_o for any of the errors specified for the routine ooppeenn(2).

       The ffddooppeenn() function may also fail and set _e_r_r_n_o for any of the errors specified for the routine ffccnnttll(2).

       The  ffrreeooppeenn()  function  may  also  fail  and  set  _e_r_r_n_o  for any of the errors specified for the routines ooppeenn(2), ffcclloossee(3), and
       fffflluusshh(3).

AATTTTRRIIBBUUTTEESS
       For an explanation of the terms used in this section, see aattttrriibbuutteess(7).

       ┌─────────────────────────────┬───────────────┬─────────┐
       │IInntteerrffaaccee                    │ AAttttrriibbuuttee     │ VVaalluuee   │
       ├─────────────────────────────┼───────────────┼─────────┤
       │ffooppeenn(), ffddooppeenn(), ffrreeooppeenn() │ Thread safety │ MT-Safe │
       └─────────────────────────────┴───────────────┴─────────┘
CCOONNFFOORRMMIINNGG TTOO
       ffooppeenn(), ffrreeooppeenn(): POSIX.1-2001, POSIX.1-2008, C89, C99.

       ffddooppeenn(): POSIX.1-2001, POSIX.1-2008.

NNOOTTEESS
   GGlliibbcc nnootteess
       The GNU C library allows the following extensions for the string specified in _m_o_d_e:

       cc (since glibc 2.3.3)
              Do not make the open operation, or subsequent read and write operations, thread cancellation points.  This  flag  is  ignored
              for ffddooppeenn().

       ee (since glibc 2.7)
              Open the file with the OO__CCLLOOEEXXEECC flag.  See ooppeenn(2) for more information.  This flag is ignored for ffddooppeenn().

       mm (since glibc 2.3)
              Attempt  to  access  the  file using mmmmaapp(2), rather than I/O system calls (rreeaadd(2), wwrriittee(2)).  Currently, use of mmmmaapp(2) is
              attempted only for a file opened for reading.

       xx      Open the file exclusively (like the OO__EEXXCCLL flag of ooppeenn(2)).  If the file already exists, ffooppeenn() fails, and  sets  _e_r_r_n_o  to
              EEEEXXIISSTT.  This flag is ignored for ffddooppeenn().

       In addition to the above characters, ffooppeenn() and ffrreeooppeenn() support the following syntax in _m_o_d_e:

           ,,ccccss==_s_t_r_i_n_g

       The given _s_t_r_i_n_g is taken as the name of a coded character set and the stream is marked as wide-oriented.  Thereafter, internal con‐
       version functions convert I/O to and from the character set _s_t_r_i_n_g.  If the ,,ccccss==_s_t_r_i_n_g syntax is not specified, then the  wide-ori‐
       entation  of  the  stream is determined by the first file operation.  If that operation is a wide-character operation, the stream is
       marked wide-oriented, and functions to convert to the coded character set are loaded.

BBUUGGSS
       When parsing for individual flag characters in _m_o_d_e (i.e., the characters preceding the "ccs" specification), the glibc  implementa‐
       tion  of ffooppeenn() and ffrreeooppeenn() limits the number of characters examined in _m_o_d_e to 7 (or, in glibc versions before 2.14, to 6, which
       was not enough to include possible specifications such as "rb+cmxe").  The current implementation of ffddooppeenn() parses at most 5 char‐
       acters in _m_o_d_e.

SSEEEE AALLSSOO
       ooppeenn(2), ffcclloossee(3), ffiilleennoo(3), ffmmeemmooppeenn(3), ffooppeennccooookkiiee(3)

CCOOLLOOPPHHOONN
       This  page  is part of release 4.04 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, information about reporting bugs,
       and the latest version of this page, can be found at http://www.kernel.org/doc/man-pages/.

GNU                                                              2015-08-08                                                        FOPEN(3)
